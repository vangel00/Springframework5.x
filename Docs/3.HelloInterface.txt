Hello Interface Exercise
-------------------------------
 - 객체의 사용방법을 정의한 타입 입니다.
  다형성(메소드 오버로딩, 추상 메소드 오버 라이딩, 인터페이스, 추상 클래스..) 중에 하나를 구현하는데 일조합니다.
  필요성: 개발 코드와 객체가 서로 통신하는 접점 역할을 담당
   직접 객체의 메소드를 호출하지 않는 이유는 개발 코드를 수정하지 않고, 사용하는 객체를 변경 하기 위하여
   여러 개의 객체를 사용하는데, 그 객체에 따라서 실행 내용과 결과가 달라집니다. 
   결국, 코드 변경 없이 실행 내용과 리턴값을 다양화 할 수 있다는 장점을 가지고 있습니다.
		 
 인터페이스란 몸체가 미완성 인채로 남겨진 추상 메소드를 가지는 것을 말합니다. 
- 특징
 1.다중 상속이 가능합니다.
 2.인터페이스 자체도 상속이 가능합니다.
 3.인터페이스는 상수와 추상 메소드만 가질 수 있으며,
  접근제어자는 명시하지 않아도 자동으로 public으로 설정되어 클래스에 첨가되거나, 구현함으로써 바로 접근이 가능합니다.
 4.멤버변수(클래스 변수)는 접근 제어자를 명시하지 않아도 기본 상수인 final static의 변경자로 설정이 됩니다.
 5.인터페이스로 구현하는 클래스는 인터페이스의 상위 인터페이스가 제공하는 추상 메소드를 포함하여 모든 메소드를 구현 하지 
 않으면 추상 클래스로 선언해 주어야 합니다.
 6.default: public abstract void Say(int x, String msg)
 7.static void Say2(double xxx)
 8.7번 위의 내용은 자바8버전부터 사용 가능합니다.
  - 추상 클래스와 인터페이스는 미리 사전에 준비하여 두는 것이 목적.


 * public abstract class A extends B {  }
 * public interface B extends C {    }
 * 
 * 다중 상속의 효과
 * public class V extends N implements S, A, B, C, D, E , F..... {    }
 * 
 * public interface S extends B {    }

