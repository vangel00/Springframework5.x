 Spring 소개
---------------------------

* STS3 download
  Spring Tool Suite 3.9.12 download
--------------------------------------------
https://dist.springsource.com/release/STS/index.html

* 스프링 레거시 설정
https://huimang2.github.io/java/spring-legacy-setting.html

* Spring Tool Suite 3 다운로드 
https://github.com/spring-attic/toolsuite-distribution/wiki/Spring-Tool-Suite-3

-----------------------------------------------
.Maven : http://maven.apache.org/
-----------------------------------------------
Maven이란?

Maven은 지금까지 애플리케이션을 개발하기 위해 반복적으로 진행해왔던 작업들을 지원하기 위하여 
등장한 도구입니다. 
Maven을 사용하면 빌드(Build), 패키징, 문서화, 테스트와 테스트 리포팅, git, 의존성관리, svn등과 같은 
형상관리서버와 연동(SCMs), 배포 등의 작업을 손쉽게 할 수 있습니다.

Maven을 이해하려면 CoC(Convention over Configuration)라는 단어를 먼저 이해해야 합니다.
CoC란 일종의 관습을 말하는데, 
예를 들자면 프로그램의 소스파일은 어떤 위치에 있어야 하고, 
소스가 컴파일된 파일들은 어떤 위치에 있어야 하고 등을 미리 정해놨다는 것입니다.

이 말은 관습에 이미 익숙한 사용자는 쉽게 Maven을 사용할 수 있는데, 
관습에 익숙하지 않은 사용자는 이러한 제약사항에 대해서 심한 거부감을 느낄 수 있습니다.
Maven을 사용한다는 것은 어쩌면 이러한 관습 즉 CoC에 대해서 알아나가는 것이라고도 말할 수 있습니다. 
이러한 관습에 빨리 익숙해지려면, 많이 찾아보고 사용해봐야합니다.

Maven을 사용할 경우 얻게 되는 이점은?
Maven을 사용할 경우, 굉장히 편리한 점들이 많습니다.

 - 편리한 의존성 라이브러리 관리가 있습니다.
앞에서 JSTL을 학습할 때, 몇 가지 파일을 다운로드 하여 /WEB-INF/lib폴더에 복사하여 사용했었습니다.
관련된 라이브러리가 많아질수록 이러한 방식은 상당히 불편해집니다.
Maven을 사용하면 설정 파일에 몇 줄 적어줌으로써 직접 다운로드 받거나 하는 것을 하지 않아도 
라이브러리를 사용할 수 있습니다.

프로젝트에 참여하는 개발자가 많아지게 되면, 
프로젝트를 빌드하는 방법에 대하여 가이드하는 것도 쉬운 일이 아닙니다.
Maven을 사용하게 되면 Maven에 설정한 대로 모든 개발자가 일관된 방식으로 빌드를 수행할 수 있게 됩니다.

 - Maven은 또한 다양한 플러그인을 제공해줘서, 굉장히 많은 일들을 자동화시킬 수 있습니다.

 
Maven 기본
-------------------
Archetype을 이용하여 Maven 기반 프로젝트를 생성할 경우 
생성된 프로젝트 하위에 pom.xml 파일이 생성됩니다.

pom.xml 파일을 살펴보면 다음과 같습니다. 

<project xmlns="http://maven.apache.org/POM/4.0.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
	https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>SpringSample22_ParamaterVlaue</groupId>
  <artifactId>SpringSample22_ParamaterVlaue</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <release>11</release>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <version>3.2.3</version>
        <configuration>
		<warSourceDirectory>src/main/webapp</warSourceDirectory>
        </configuration>
      </plugin>
    </plugins>
  </build>
  
 <!-- 라이브러리 버전관리 -->
	<properties>
		<javax.servlet-version>4.0.1</javax.servlet-version>
		<javax.servlet.jsp-version>2.3.3</javax.servlet.jsp-version>
		<org.springframework-version>5.3.3</org.springframework-version>
		<!--  <org.springframework-version>4.3.25.RELEASE</org.springframework-version> -->
		<!--<org.springframework-version>3.2.0.RELEASE</org.springframework-version> -->
		<javax.validation-version>2.0.1.Final</javax.validation-version>
		<org.hibernate-version>7.0.1.Final</org.hibernate-version>
		<org.apache.commons-version>2.8.0</org.apache.commons-version>
		<org.mybatis-version>2.0.6</org.mybatis-version>
		<com.fasterxml.jackson.core-version>2.12.1</com.fasterxml.jackson.core-version>
		<com.oracle.database.jdbc-version>11.2.0.4</com.oracle.database.jdbc-version>
		
	</properties>
	<repositories>
		<repository>
			<id>codelds</id>
			<url>https://code.lds.org/nexus/content/groups/main-repo</url>
		</repository>
	</repositories>

	<!-- 라이브러리 설정 -->
	<dependencies>

		<!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
		<!-- https://mvnrepository.com/artifact/javax.servlet/servlet-api -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>${javax.servlet-version}</version>
			<scope>provided</scope> 
		</dependency>


	</dependencies>

각각의 태그의 의미는 다음과 같습니다.

- project : pom.xml 파일의 최상위 루트 엘리먼트(Root Element)입니다.
- modelVersion : POM model의 버전입니다. 
- groupId : 프로젝트를 생성하는 조직의 고유 아이디를 결정합니다. 
  일반적으로 도메인 이름을 거꾸로 적습니다.
- artifactId : 해당 프로젝트에 의하여 생성되는 artifact의 고유 아이디를 결정합니다. 

Maven을 이용하여  pom.xml을 빌드할 경우 다음과 같은 규칙으로 artifact가 생성됩니다. 
--------------------------------------------------------------------------------------------
artifactid-version.packaging. 
위 예의 경우 빌드할 경우 examples-1.0-SNAPSHOT.jar 파일이 생성됩니다.
- packaging : 해당 프로젝트를 어떤 형태로 packaging 할 것인지 결정합니다. 
  jar, war, ear 등이 해당됩니다.
- version : 프로젝트의 현재 버전. 추후 살펴보겠지만 
  프로젝트가 개발 중일 때는 SNAPSHOT을 접미사로 사용합니다. 
  Maven의 버전 관리 기능은 라이브러리 관리를 편하게 합니다.
- name : 프로젝트의 이름입니다.
- url : 프로젝트 사이트가 있다면 사이트 URL을 등록하는 것이 가능합니다.

Maven 을 이용할 경우 얻게 되는 큰 이점 중의 하나는 Dependency Management 기능입니다.

위 pom.xml 파일에서 <dependencies/> 엘리먼트가 Dependency Management 기능의 핵심이라고 할 수 있습니다.
해당 엘리먼트 안에 필요한 라이브러리를 지정하게 됩니다.

메이븐 저장소 관리(의존성 관리)
scope는 다음과 같은 4가지가 있습니다.
--------------------------------------------
compile : 컴파일 할 때 필요. 테스트 및 런타임에도 클래스 패스에 포함됩니다. 
	기본 scope. 컴파일 및 배포할 때 같이 제공되는 라이브러리
	scope 을 설정하지 않는 경우 기본값입니다.

runtime : 런타임에 필요. JDBC 드라이버 등이 예가 됩니다. 
	컴파일 시에는 필요하지 않지만, 실행 시에 필요한 경우입니다.

provided : 컴파일시점에는 필요하지만, 배포시에는 포함시키면 안 되는 라이브러리
	실제 런타임 때에는 컨테이너 같은 것에서 제공되는 모듈. 
	servlet, jsp api 등이 이에 해당. 배포 시 제외됩니다. 

test : Junit과 같은 테스트 코드를 컴파일 할 때 필요. 
	테스트 시 클래스 패스에 포함되며, 배포 시 제외됩니다.

system : 속성이 provided와 유사하다. 
	다만 개발자가 직접 jar 파일을 제공해주어야 합니다. 
	저장소에서 관리가 잘 되지 않을 수 있다.

https://maven.apache.org/pom.html#POM_Relationships

