IoC 컨테이너
https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans
------------------------
- Inversion of Control : 개발자가 코드 등의 흐름이나 객체 생성에 관련된 코드를 프로그래밍에 직접 작성하는 것이 아니라, 
   프레임워크가 사용하는 파일에 작성하여 이를 토대로 프레임워크가 객체를 생성하고, 반환하고, 
   코드가 동작하는 순서를 결정하는 것을 의미합니다.

-객체의 생성, 생명주기의 관리까지 모든 객체에 대한 제어권을 가진다.
-IoC 컨테이너는 객체의 생성을 책임지고, 의존성을 관리합니다.
-POJO의 생성, 초기화, 서비스, 소멸에 대한 권한을 가지게 됩니다.
-개발자들이 직접 POJO를 생성 할 수 있지만, 컨테이너에게 맡깁니다. (Bean등록=> xml파일)

-2가지 표현
1.의존성 검색 : DL(DataBase연결), Connection Pool(Server.xml), Driver
  - DL(DB연결)
      Class.forName("oracle.jdbc.OracleDriver");
      String url="jdbc:oracle:thin:@localhost:1521:xe";
      String id="hyun";
      String pw="oraclejava";
      conn = DriverManager.getConnection(url, id, pw); 
  
  - Connection Pool(server.xml, context.xml)

	Context init = new InitialContext();
	DataSource ds = (DataSource) init.lookup("java:comp/env/jdbc/OracleDB");
	conn = ds.getConnection();

  <Context> 
  <Resource name="jdbc/OracleDB" 
   auth="Container"
   type="javax.sql.DataSource" 
   username="oraclejava" 
   password="oraclejava"
   driverClassName="oracle.jdbc.driver.OracleDriver"
   factory="org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory"
   url="jdbc:oracle:thin:@127.0.0.1:1521:xe"
   maxActive="500" 
   maxIdle="100"/>  
</Context>


2.의존성 주입 : DI => Setter Injection, Constructor Injection, Method Injection
  각 클래스간에 의존관계를  빈 설정 정보를 바탕으로 컨테이너가 자동으로 연결해 줍니다.
 
 - 객체의 생성은 빈 등록이 아니라, getBean()를 호출함으로써 객체가 생성됩니다. 

- 종류
1)BeanFactory : 3.X주로 사용
 -클래스를 통하여 객체를 생성하고, 이를 전달합니다.
 -상속 등 객체간의 관계를 형성하고 관리합니다.
    <종류>
	ApplicationEventPublisher, ListableBeanFactory, MessageSource, 
	ResourceLoader  ... 
 - xmlBeanFactory 

2)ApplicationContext
 - ApplicationContext는 애플리케이션에서 객체 생성, 구성 및 관리를 담당하는 핵심 컨테이너입니다. 
   ApplicationContext는 BeanFactory 인터페이스를 구현하며, BeanFactory보다 더 많은 기능과 기능을 제공합니다.
 - BeanFactory 상속받아 기본적인 컨테이너 기능 + 확장 기능 제공
 - 확장한 기능 : 메시지 소스 처리 기능, 이벤트 발행기능, 리소스 로딩 기능, 트랜잭션 관리, 시큐리티 등등..
   컨테이너의 구동되는 시점에 bean에 등록되어 있는 클래스를 객체화하는 즉시 로딩 방식.
 - 클래스를 통하여 객체를 생성하고, 이를 전달합니다.
 - 상속 등 객체간의 관계를 형성하고 관리합니다.
 - 국제화 지원 등 문자열에 대한 다양한 기능을 제공합니다.
 - 리스너로 등록되어 있는 Bean에 이벤트를 발생할 수 있다.
 - Bean에 관련한 설정을 위한 xml 파일은 즉시 로딩되어서 객체를 미리 생성하여 가지게 됩니다.
 - 종류
   StaticApplicationContext, genericXmlApplicationContext, WebApplicationContext, XmlWebApplicationContext ...
 - ClassPathXmlApplicationContext
 - FileSystemXmlApplicationContext
 - XmlWebApplicationContext

 1. StaticApplicationContext는 ApplicationContext의 구현 중 하나로, 
   애플리케이션 컨텍스트를 코드에서 직접 구성하고 구성 정보를 제공하는 방식으로 동작합니다.

   StaticApplicationContext는 다음과 같은 기능을 제공합니다.
   - 빈 등록: registerSingleton() 또는 registerBeanDefinition() 메서드를 사용하여 빈을 등록할 수 있습니다. 
     이를 통해 빈을 동적으로 추가하거나 수정할 수 있습니다.

   - 빈 설정: getBeanFactory() 메서드를 사용하여 BeanDefinition을 가져올 수 있으며, 
     이를 통해 빈의 설정 정보를 동적으로 수정할 수 있습니다.

   - 컨텍스트 구성: refresh() 메서드를 사용하여 컨텍스트를 구성할 수 있습니다. 
     이를 통해 빈 등록 및 구성 정보 변경 후, 컨텍스트를 갱신할 수 있습니다.

   - 상위 컨텍스트 참조: setParent() 메서드를 사용하여 상위 컨텍스트를 설정할 수 있습니다. 
     이를 통해 상위 컨텍스트의 빈을 참조하거나 설정 정보를 상속받을 수 있습니다.

    StaticApplicationContext는 주로 테스트 코드나 간단한 스크립트에서 사용됩니다. 
    이를 통해 애플리케이션 컨텍스트를 동적으로 생성하고 수정할 수 있습니다. 
    그러나, 런타임에서 동적으로 빈을 추가하거나 수정하는 것은 비추천되는 방식입니다. 
    대부분의 경우 애플리케이션의 구성 정보는 XML, 어노테이션 또는 Java Config와 같은 외부 파일이나 
    클래스에서 로드하여 ApplicationContext에 전달하는 것이 더 바람직합니다.

  2.GenericXmlApplicationContext
    인터페이스를 구현한 클래스 중 하나로, XML 기반의 설정 파일을 사용하여 
    애플리케이션 컨텍스트를 생성하는 기능을 제공합니다.
   GenericXmlApplicationContext는 대부분의 애플리케이션에서 많이 사용되는 기능 중 하나로, 
   Spring Framework의 핵심 기능 중 하나입니다. 
   XML 파일을 사용하여 간단하게 빈(bean)을 정의하고 의존성(dependency)을 설정할 수 있으며, 
   자동으로 빈(bean)을 등록하고 초기화합니다. 
   이러한 기능들을 활용하여 Spring Framework를 효율적으로 사용할 수 있습니다.

   GenericXmlApplicationContext는 다음과 같은 특징을 가집니다.
  - XML 기반 설정 파일을 사용
   GenericXmlApplicationContext는 XML 파일을 사용하여 애플리케이션 컨텍스트를 생성합니다. 
   XML 파일은 애플리케이션의 빈(bean) 정의와 빈 간의 의존성(dependency)을 정의하는데 사용됩니다.

  - ClassPath나 파일시스템 경로에서 설정 파일을 로드
   GenericXmlApplicationContext는 설정 파일을 로드하기 위해 classpath: 또는 file: 접두어를 사용한 경로를 사용할 수 있습니다.

  - 빈(bean) 등록: XML 파일에서 정의된 빈은 ApplicationContext가 생성될 때 자동으로 등록됩니다. 
    XML 파일에 정의된 모든 빈은 싱글톤(scope="singleton")으로 생성됩니다.

  - 빈(bean) 설정: XML 파일에서 빈을 정의할 때, 빈의 속성(property)을 설정할 수 있습니다. 
   속성값은 문자열 또는 참조(reference)로 설정할 수 있으며, p: 접두어를 사용하여 간단하게 속성을 설정할 수 있습니다.

  - 빈(bean) 간의 의존성(dependency) 설정
   XML 파일에서 빈을 정의할 때, 빈 간의 의존성(dependency)을 설정할 수 있습니다. 
   의존하는 빈을 참조할 때 ref 속성을 사용하며, 의존성을 주입할 때 property 또는 constructor-arg를 사용합니다.

  - 빈(bean) 후처리(bean post-processing)
   GenericXmlApplicationContext는 빈(bean) 후처리(bean post-processing)를 지원합니다. 
   빈 후처리는 애플리케이션 컨텍스트가 생성된 후, 빈이 생성된 후 초기화하기 전 또는 초기화된 후에 수행할 수 있는 작업을 정의합니다. BeanPostProcessor 인터페이스를 구현하여 빈 후처리 작업을 수행할 수 있습니다.


  3.WebApplicationContext

  WebApplicationContext는 Spring Framework에서 제공하는 ApplicationContext 인터페이스를 구현한 클래스 중 하나로, 
웹 애플리케이션에서 사용하는 빈(bean)을 관리하고, 웹 관련 기능을 제공하는 역할을 합니다.

WebApplicationContext는 다음과 같은 특징을 가집니다.

 - 웹 애플리케이션에 특화된 기능 제공: 
  WebApplicationContext는 웹 애플리케이션에서 사용하는 빈(bean)을 관리하고, 웹 관련 기능을 제공합니다. 
  예를 들어, HttpServletRequest와 같은 웹 요청 객체를 빈으로 등록하여 컨트롤러(Controller)에서 사용할 수 있습니다.

 - 스프링 MVC 구성: 
  WebApplicationContext는 스프링 MVC 프레임워크의 구성을 지원합니다. 
  스프링 MVC는 웹 애플리케이션에서 Model-View-Controller(MVC) 아키텍처를 구현하는 프레임워크로, 
  WebApplicationContext는 스프링 MVC에서 사용하는 컨트롤러, 뷰, 핸들러 매핑 등의 빈을 등록할 수 있습니다.

 - DispatcherServlet 구성: 
  WebApplicationContext는 DispatcherServlet을 구성하는 데 사용됩니다.
  DispatcherServlet은 스프링 MVC에서 HTTP 요청을 처리하는 핵심 컴포넌트로, 
  WebApplicationContext는 DispatcherServlet이 사용하는 빈을 등록할 수 있습니다.

 - 웹 애플리케이션 스코프: 
  WebApplicationContext는 웹 애플리케이션 스코프를 지원합니다. 
  웹 애플리케이션 스코프는 웹 애플리케이션 전체에서 사용되는 빈(bean)을 관리하는 스코프로, 
  웹 애플리케이션에서 공유하는 객체를 관리할 때 사용됩니다.

 - 웹 환경 설정: 
  WebApplicationContext는 웹 환경에 맞게 설정된 ApplicationContext입니다. 
  웹 환경에서는 ServletContext를 이용하여 빈(bean)을 등록하고 관리하기 때문에, 
  WebApplicationContext는 ServletContext를 이용하여 빈(bean)을 등록하고 관리합니다.

 WebApplicationContext는 웹 애플리케이션에서 스프링 프레임워크를 사용할 때 필요한 기능을 제공하는 
 핵심 컴포넌트 중 하나입니다. 
 스프링 MVC와 같은 웹 프레임워크에서는 
 WebApplicationContext를 사용하여 컨트롤러, 뷰, 핸들러 매핑 등의 빈(bean)을 등록하고 관리합니다. 


 4.XmlWebApplicationContext 

인터페이스의 구현체 중 하나로, XML 파일을 사용하여 웹 애플리케이션 컨텍스트를 설정할 수 있습니다.

XmlWebApplicationContext는 다음과 같은 특징을 가집니다.

 - XML 파일 기반 설정: 
  XmlWebApplicationContext는 XML 파일을 사용하여 웹 애플리케이션 컨텍스트를 설정합니다. 
  DispatcherServlet의 초기화 파라미터 중 하나인 contextConfigLocation에 XML 파일의 경로를 지정하여 사용할 수 있습니다.
 
 - 웹 환경에서 사용: 
  XmlWebApplicationContext는 웹 환경에서 사용하기 위해 설계되었습니다.
  XmlWebApplicationContext는 WebApplicationContext의 구현체이며, 웹 애플리케이션에서 필요한 컴포넌트들을 등록하고 관리합니다.

 - 다양한 빈(bean) 생성 방식: 
  XmlWebApplicationContext는 XML 파일을 사용하여 다양한 방식으로 빈(bean)을 생성할 수 있습니다. 
  예를 들어, 생성자 인자를 사용하여 빈을 생성할 수 있으며, 프로퍼티 값을 설정하여 빈을 초기화할 수도 있습니다.

 - 상속 관계: 
  XmlWebApplicationContext는 XML 파일을 사용하여 빈(bean)을 설정할 때, 부모 애플리케이션 컨텍스트를 상속할 수 있습니다. 
  이를 통해 중복되는 설정을 줄일 수 있으며, 부모 애플리케이션 컨텍스트에 등록된 빈(bean)을 자식 애플리케이션 컨텍스트에서 사용할 수 있습니다.

 - 스프링 MVC와 통합: 
  XmlWebApplicationContext는 스프링 MVC와 함께 사용하기 위해 설계되었습니다. 
  스프링 MVC는 웹 애플리케이션에서 모델-뷰-컨트롤러(MVC) 패턴을 구현하는데 사용되며, 
  XmlWebApplicationContext는 이 스프링 MVC와 함께 사용됩니다. 
  스프링 MVC는 DispatcherServlet을 사용하여 웹 요청을 처리하며, 
  DispatcherServlet은 XmlWebApplicationContext에서 빈(bean)을 검색하여 사용합니다.


 5. ClassPathXmlApplicationContext
 인터페이스의 구현체 중 하나로, 클래스패스(classpath)상의 XML 파일을 사용하여 애플리케이션 컨텍스트를 설정합니다.
 ClassPathXmlApplicationContext는 다음과 같은 특징을 가집니다.

 - XML 파일 기반 설정: 
  ClassPathXmlApplicationContext는 XML 파일을 사용하여 애플리케이션 컨텍스트를 설정합니다. 
  클래스패스(classpath)상의 XML 파일의 경로를 지정하여 사용할 수 있습니다. ("kr/co/oraclejava/config/beans.xml")

 - 클래스패스(classpath)에서 빈(bean) 생성: 
  ClassPathXmlApplicationContext는 클래스패스(classpath)에서 빈(bean)을 생성합니다. 
  클래스패스(classpath)상의 XML 파일을 기반으로 빈(bean)을 생성하므로, XML 파일이 클래스패스에 포함되어 있어야 합니다.
    <bean id="hEng" class="kr.co.oraclejava.beans.helloEng"></bean>
    <bean id="hKor" class="kr.co.oraclejava.beans.helloKor"></bean>

 - 다양한 빈(bean) 생성 방식: 
  ClassPathXmlApplicationContext는 XML 파일을 사용하여 다양한 방식으로 빈(bean)을 생성할 수 있습니다. 
  생성자 인자를 사용하여 빈을 생성할 수 있으며, 프로퍼티 값을 설정하여 빈을 초기화할 수도 있습니다.
     helloEng heng = (helloEng)context.getBean("hEng");

 - 상속 관계: ClassPathXmlApplicationContext는 XML 파일을 사용하여 빈(bean)을 설정할 때, 부모 애플리케이션 컨텍스트를 상속할 수 있습니다. 
  이를 통해 중복되는 설정을 줄일 수 있으며, 부모 애플리케이션 컨텍스트에 등록된 빈(bean)을 자식 애플리케이션 컨텍스트에서 사용할 수 있습니다.

 - 자원 해제: ClassPathXmlApplicationContext는 애플리케이션 종료 시 자원을 해제합니다. 
   close() 메서드를 호출하여 애플리케이션 컨텍스트를 종료할 수 있습니다.
       context.close();

 - 환경 설정: ClassPathXmlApplicationContext는 Environment 인터페이스를 구현하므로, 
   환경 설정 정보를 애플리케이션 컨텍스트에서 사용할 수 있습니다. 
   Environment 인터페이스를 사용하여 시스템 프로퍼티, 환경 변수, JNDI 등을 읽어올 수 있습니다.

 6. FileSystemXmlApplicationContext

 파일 시스템 상의 XML 파일을 이용하여 빈을 생성하고 관리하는 클래스입니다. 
 ClassPathXmlApplicationContext와는 달리 XML 파일을 클래스패스가 아닌 파일 시스템에서 로드합니다. 
 따라서, 파일 시스템에 존재하는 XML 파일에 대한 경로를 지정해야 합니다.
 이 클래스는 ClassPathXmlApplicationContext와 유사하지만, 
 XML 파일을 클래스패스(classpath)가 아닌 파일 시스템에서 로드합니다.

 String[] configLocations = {"/path/to/applicationContext.xml"};
 ApplicationContext context = new FileSystemXmlApplicationContext(configLocations);

 /path/to/applicationContext.xml" 경로에 존재하는 XML 파일을 이용하여 애플리케이션 컨텍스트를 생성합니다.
