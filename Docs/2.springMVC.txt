SPRING MVC란?
 ----------------------------------
웹 애플리케이션

- 프리젠테이션 계층 : 식당의 메뉴판, 식탁, JSP(PHP, ASP)
- 제어 계층 : 프리젠테이션 계층과 비지니스 로직 계층을 분리하기 위한 컨트롤러 역할, servlet, 지배인
* 비지니스 로직 계층 : 핵심 업무 처리를 어떻게 해야하는지를 기술하는 곳입니다. 요리사
- 퍼시스턴스 계층 : 데이터 처리 담당, 생성, 수정, 삭제, 검색
- 도메인 모델 계층 : 각 계층 사이에 전달되는 비지니스 객체, 음식을 담는 그릇(포인터: 시스템 주소(메모리))

- J2EE/EJB
- 오픈소스 : 새로운 아이디어 발굴, 개척, 개발,  mysql 유료화, mongoDB 무료화
- Structs => 2013년 11월 중순 => SpringFramework 3.1 => [전자정부프레임워크]5.3.3

- 스프링을 선택한 이유?
  약한 결합도를 가진 아키텍쳐 구성이 가능합니다.
  1.제어 계층 : IoC(제어의 역행화)개념
  2.비지니스 로직 계층 : AOP 개념
  3.개발 언어, 새로운 DB, 경량급 컨테이너 선택
  4.DI: setter&getter,편리하고 다양하게 처리 방법을 제공
  
  솔루션: 자바, 데이터베이스
  
  
.스프링 프레임워크의 적용 : 로드 존슨 2003년 2월 오픈소스
-------------------------
- 프리젠테이션 계층 : 브라우저상의 웹 클라이언트의 요청 및 응답을 처리
  서비스 계층, 데이터 엑세스 계층에서 발생하는 예외처리를 담당
  @Controller을 사용하여 작성된 컨트롤러 클래스가 여기에 속합니다.

- 서비스 계층 : 애플리케이션 비지니스 로직 처리와 비지니스와 관련된 도메인 모델의 적합성을 검증
   트렌잭션 관리, 프리젠테이션 계층과 데이터 엑세스 계츨사이를 여결하는 역할인데, 두 계층이 직접적으로 통신하지 않도록
   해주는 역할을 합니다.
   Service 인터페이스와 @Service을 이용하여 작성된 Service 구현 클래스가 여기에 속합니다.

- 데이터 엑세스 계층 :ORM(MyBatis, Hibernate)를 주로 사용하는 계층 
  DAO 인터페이스와 @Repository을 사용하여 작성된 DAO 구현 클래스를 말합니다.
  DB에서 데이터를 CRUD하는 계층
  
-- 도메인 모델 계층 :데이터베이스 테이블과 매칭되는 클래스, Entity 클래스라고도 부릅니다.

.DTO(Data Transfer Object) = VO(Value Object)
 	각 계층간의 데이터 교환(전송)을 위한 객체
	DB에서 데이터를 얻어서 Service, Controller등으로 보낼 때 사용합니다.
	로직을 각지 않고 순수하게 setter&getter메소드를 가지게 됩니다.
	
.DAO(Data Access Object)
	데이터베이스에 접근하는 객체, Service 계층과 데이터베이스를 연결하는 역할을 합니다.

.Entity? 
	Domain 이라고 부릅니다.
	데이터베이스 테이블과 매칭되는 클래스
	도메인 로직만을 가지고 있어야하며, 프리젠테이션 로직을 가지면 안됩니다.

.MVC 개념
 - 사용자 인터페이스와 애플리케이션 로직을 분리하는데 사용하는 패턴입니다.
 
 - Model: 애플리케이션의 비지니스 계층을 정의, 자바 클래스(DTO), 데이터 처리 관련 작업
   모델 컴포넌트
  데이터 저장소(일명 데이터베이스 등)와 연동하여 사용자가 입력한 데이터나 사용자에게 출력할 데이터를 다루는 일을 함.
  여러개의 데이터 변경 작업(추가, 변경, 삭제)을 하나로 묶는 트랜잭션을 다루는 일도 함.
  ->  DAO클래스, Service클래스에 해당

 - View: 애플리케이션의 프리젠테이션 계층, JSP 페이지, JSP(Action tag, JSTL(EL))
    유효성 검사, 화면에서 보여줌.
    View 컴포넌트
   모델이 처리한 데이터나 그 작업 결과를 가지고 사용자에게 출려 할 화면을 만드는 일을 함.
   생성된 화면으 웹 브라우저가 출력하고, 뷰 컴포넌트는 HTML과 CSS, Javascript를 사용하여 웹 브라우저가 출력 할 UI를 만든다. html과 jsp를 사용하여 작성할 수 있음.

 - Controller: 애플리케이션의 흐름을 관리, 서블릿(servlet)
     모델 레이어에서 데이터를 가져와서 뷰 레이어로 전송하는 역할
     View + Model 연결(비지니스 로직과 프리젠테이션 로직을 분리하기 위하여)
    Frount_end  : html, css, javascript, jquery + [jsp, php, asp ]... 자바스크립트프레임워크(Vue.js, React, AngularJs, node.js)
    Back_end : java, spring, jsp, php, C, c++, C#, Ruby, Python ....
    Controller 컴포넌트
  클라이언트의 요청을 받았을때 그 요청에 대해 실제 업무를 수행하는 모델 컴포넌트를 호출하는 일을 합니다.
  클라이언트가 보낸 데이터가 있다면, 모델을 호출할때 전달하기 쉽게 데이터를 적절히 가공하는 일도 합니다.
  모델이 업무 수행을 완료하면, 그 결과를 가지고 화면을 생성하도록 뷰에게 전달합니다.
  Servlet과 JSP를 사용하여 작성할 수 있음. 

 - MVC1 Controller: JSP / MVC2 Controller: Servlet

 - MVC패턴을 사용하면, 사용자 인터페이스로부터 비지니스 로직을 분리하여 애플리케이션의 시각적 요소나
    그 이면에서 실행되는 비지니스 로직을 서로 영향 없이 쉽게 고칠 수 있는 애플리케이션을 만들 수 있습니다.

 - spring MVC 주요 구성 요소
  ------------------------------------
  DispatcherServlet : 클라이언트의 요청을 받아서 컨트로러에게 클라이언트의 요청을 전달하고, 리턴한 결과값을 
     뷰에게 전달하여 응답을 한다.

  HanderMapping : URL과 요청 정보를 기준으로 하여 어떤 핸들러 객체를 사용할지를 결정하는 객체이며, 
    디스패쳐서블릿은 다수의 핸들러 매핑을 가질수 있다.

  Controller : 클라이언의 요청을 처리한후에 모델을 호출하고, 그 결과를 디스패쳐서블릿에게 알려줍니다.

  ModelAndView : 컨트롤러가 처리한 데이터 및 화면에 대한 정보를 보유한 객체

  View : 컨트롤러의 처리 결과 화면에 대한 정보를 보유하고 있는 객체

  ViewResolver : 컨트롤러가 리턴한 뷰 이름을 기반으로 컨트롤러 처리 결과를 생성할 뷰를 결정합니다.

 - DispatcherServlet
------------------------
 1) Servlet/JSP에서 사용자 요청이 발생하면 이 요청 정보를 해석하고 개발자가 만든 코드를 동작시키는 
첫 번째 서블릿 입니다.
 2) Spring MVC는 DispatcherServlet을 확대하여 Spring Framework가 가지고 있는 기능을 사용할 수 있도록 
이 클래스를 재정의하고 있습니다.
 3) Spring MVC 프로젝트 설정에서 가장먼저 해야 하는 DispatcherServlet 클래스를 Spring MVC에서 
재정의한 클래스로 설정하는 일 입니다.


.실습 준비물 
-------------------
 1) JDK 1.8이상 = 11
 2) STS4 or Eclipse2019-09 or Eclipse2022-09
 3) OracleXE64 11g
 4) apacheTomcat : 9.0
 5) spring.io


https://github.com/spring-projects/spring-framework/releases
스프링버젼별 소스 : GitHub에서 관리...
------------------------------------------------


http://www.mybatis.org/mybatis-3/ko/index.html

MyBatis 설정
1. 필요한 라이브러리 설치
- 다운로드

MySql JDBC driver 다운로드 : http://www.mysql.com/downloads/connector/j/
MyBatis 다운로드 : http://code.google.com/p/mybatis/downloads/list?can=3&q=Product%3DMyBatis
commons dbcp 다운로드: http://commons.apache.org/dbcp/
commons pool 다운로드: http://commons.apache.org/pool/

- 위 파일들을 다운로드 받아 $WEB_APP/WEB-INF/libs/ 에 복사한다.
!) MyBatis 폴더에 lib 폴더에 있는 파일들도 복사한다.

asm-3.3.1.jar, cglib-2.2.2.jar, commons-dbcp-1.4.jar, commons-logging-1.1.1.jar
commons-pool-1.6.jar, log4j-1.2.16.jar, mybatis-3.1.1.jar, mysql-connector-java-5.1.20-bin.jar
slf4j-api-1.6.2.jar, slf4j-log4j12-1.6.2.jar

*중요 XML : 
 - web.xml(org.springframework.web.servlet.DispatcherServlet), 
 - springapp-servlet.xml(xxxController),
 - server.xml :  <Connector connectionTimeout="20000" port="9000" protocol="HTTP/1.1" redirectPort="8443"/>
    <Context docBase="webpro" path="/webpro" reloadable="true" source="org.eclipse.jst.jee.server:webpro">
      <ResourceLink type="javax.sql.DataSource" name="jdbc/SpringDB" global="jdbc/SpringDB"/>
   </Context>
   </Host>
   </Engine>

